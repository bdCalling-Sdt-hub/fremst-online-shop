 // Assuming Company is imported from your model file

import { Cprice } from '../cprice/cprice.model'
 import { Company } from '../company/company.model'

 export const updateSalePriceWithCompanyPrices = async (products: any[], companyId?: string, role?: string) => {
  const productIds = products.map(product => product._id.toString());

  // Fetch prices for the products from Cprice collection
  const companyPrices = companyId
    ? await Cprice.find({ company: companyId, product: { $in: productIds } })
    : await Cprice.find({ product: { $in: productIds } });
  console.log(companyPrices, "ðŸ¦¥ðŸ¦¥");

  const priceMap = new Map();
  companyPrices.forEach((cp) => {
    priceMap.set(cp.product.toString(), cp.price);
  });

  // If the user role is 'employee', filter the products based on company availability
  if (role === 'employee' && companyId) {
    // Fetch the company document to get available products
    const company = await Company.findById(companyId).select('availableProducts');

    // If the company exists, filter the products based on availability
    if (company && company.availableProducts) {
      products = products.filter((product) =>
        company.availableProducts.includes(product._id)
      );
    } else {
      // If no available products are found, return an empty array or handle it as needed
      products = [];
    }
  }

  // Update salePrice with company-specific price if available
  return products.map((product) => {
    const updatedPrice = priceMap.get(product._id.toString());
    return {
      ...product.toObject(),
      updatedPrice: updatedPrice !== undefined ? updatedPrice : product.salePrice, // Add updatedPrice
    };
  });
};
